#
# GENERATED BY CHEF, do not modify by hand!
#

[DEFAULT]
# Show more verbose log output (sets INFO log level output)
<% if node['barbican']['logging']['verbose'] %>
verbose = True
<% end %>

# Show debugging output in logs (sets DEBUG log level output)
<% if node['barbican']['logging']['debug'] %>
debug = True
<% end %>

<% if node['barbican']['logging']['use_log_file'] %>
# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
log_file = <%= @log_file %>
<% end %>

<% if node['barbican']['logging']['use_syslog'] %>
use_syslog = True
syslog_log_facility = <%= node['barbican']['logging']['syslog_log_facility'] %>
<% end %>

# Address to bind the server
bind_host = <%= @bind_host %>

# Port to bind the server to
bind_port = <%= @bind_port %>

# Host name, for use in HATEOS-style references
#  Note: Typically this would be the load balanced endpoint that clients would use
#  communicate back with this service.
host_href = <%= @host_ref %>

# Backlog requests when creating socket
backlog = <%= node['barbican']['backlog'] %>

# TCP_KEEPIDLE value in seconds when creating socket.
# Not supported on OS X.
tcp_keepidle = <%= node['barbican']['tcp_keepidle'] %>

# ================= Database Options ==========================

# SQLAlchemy connection string for the reference implementation
# registry server. Any valid SQLAlchemy connection string is fine.
# See: http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html#sqlalchemy.create_engine
sql_connection = <%= @connection %>

# Period in seconds after which SQLAlchemy should reestablish its connection
# to the database.
#
# MySQL uses a default `wait_timeout` of 8 hours, after which it will drop
# idle connections. This can result in 'MySQL Gone Away' exceptions. If you
# notice this, you can lower this value to ensure that SQLAlchemy reconnects
# before MySQL can drop the connection.
sql_idle_timeout = <%= node['barbican']['sql_idle_timeout'] %>

sql_max_retries = <%= node['barbican']['sql_max_retries'] %>
sql_retry_interval = <%= node['barbican']['sql_retry_interval'] %>

# Disable auto-creation/update of database tables when the application boots up.
<% if !node['barbican']['db_auto_create'] %>
db_auto_create = False
<% end %>

# Maximum page size for the 'limit' paging URL parameter.
max_limit_paging = <%= node['barbican']['max_limit_paging'] %>
# Default page size for the 'limit' paging URL parameter.
default_limit_paging = <%= node['barbican']['default_limit_paging'] %>

# When owner_is_tenant is true true, this option sets the owner
# of an image to be the tenant. Otherwise, the owner of the image
# will be the authenticated user issuing the request.
owner_is_tenant = <%= node['barbican']['owner_is_tenant'] %>

# Role used to identify an authenticated user as administrator
admin_role = <%= node['barbican']['admin_role'] %>

# Allow unauthenticated users to access the API with read-only
# privileges. This only applies when using ContextMiddleware.
allow_anonymous_access = <%= node['barbican']['allow_anonymous_access'] %>

#maximum secret size for validators
max_allowed_secret_in_bytes = <%= node['barbican']['max_allowed_secret_in_bytes'] %>
max_allowed_request_size_in_bytes = <%= node['barbican']['max_allowed_request_size_in_bytes'] %>

<% if node['barbican']['enable_ssl'] %>
# ================= SSL Options ===============================

# Certificate file to use when starting API server securely
cert_file = <%= node['barbican']['cert_file'] %>

# Private key file to use when starting API server securely
key_file = <%= node['barbican']['key_file'] %>

# CA certificate file to use to verify connecting clients
ca_file = <%= node['barbican']['ca_file'] %>
<% end %>


# ============ Delayed Delete Options =============================

# Turn on/off delayed delete
delayed_delete = False

# Delayed delete time in seconds
scrub_time = 43200

# Directory that the scrubber will use to remind itself of what to delete
# Make sure this is also set in glance-scrubber.conf
scrubber_datadir = /var/lib/barbican/scrubber

# ======== OpenStack policy integration
# JSON file representing policy (string value)
policy_file = <%= node['barbican']['policy']['policy_file'] %>

# Rule checked when requested rule is not found (string value)
policy_default_rule = default

# ================= Queue Options - oslo.messaging ==========================

ampq_durable_queues = <%= node['barbican']['queue']['ampq_durable_queues'] %>
rabbit_userid = <%= node['barbican']['queue']['rabbit_userid'] %>
rabbit_password = <%= node['barbican']['queue']['rabbit_password'] %>
rabbit_ha_queues = <%= node['barbican']['queue']['rabbit_ha_queues'] %>
rabbit_port = <%= node['barbican']['queue']['rabbit_port'] %>
rabbit_virtual_host = <%= node['barbican']['queue']['rabbit_virtual_host'] %>

# For HA, specify queue nodes in cluster, comma delimited:
#   For example: rabbit_hosts=192.168.50.8:5672, 192.168.50.9:5672
rabbit_hosts = <%= node['barbican']['queue']['rabbit_hosts'].join(', ') %>

# The number of threads to have in the oslo.messaging executor
rpc_thread_pool_size = <%= node['barbican']['queue']['rpc_thread_pool_size'] %>

# ================= Queue API Options ==========================
[queue]

# Enable queuing asynchronous messaging.
#   Set false to invoke worker tasks synchronously.
enable = <%= node['barbican']['queue']['enable'] %>

# Namespace for the queue
namespace = <%= node['barbican']['queue']['namespace'] %>

# Topic for the queue
topic = <%= node['barbican']['queue']['topic'] %>

# Version for the task API
version = <%= node['barbican']['queue']['version'] %>

# Server name for RPC service
server_name = <%= node['barbican']['queue']['server_name'] %>

# Maximum times to retry a failed task
task_max_retries = <%= node['barbican']['queue']['task_max_retries'] %>

# Seconds to wait between retries for failed tasks
task_retry_seconds = <%= node['barbican']['queue']['task_retry_seconds'] %>

# Seconds (float) to wait between starting retry scheduler
task_retry_tg_initial_delay = <%= node['barbican']['queue']['task_retry_tg_initial_delay'] %>

# Seconds (float) for thread group interval max
# !!!! WARNING: Set the seconds here the same on
#      'task_retry_scheduler' below !!!!
task_retry_tg_periodic_interval_max = <%= node['barbican']['queue']['task_retry_tg_periodic_interval_max'] %>

# Seconds for retry scheduler cycle
# !!!! WARNING: Set the seconds here the same on
#     'task_retry_tg_periodic_interval_max' above !!!!
task_retry_scheduler_cycle = <%= node['barbican']['queue']['task_retry_scheduler_cycle'] %>




# ================= Crypto Extension Options ==========================
[crypto]

namespace = <%= node['barbican']['crypto']['namespace'] %>
enabled_crypto_plugins = <%= node['barbican']['crypto']['enabled_crypto_plugins'].join(',') %>


<% if node['barbican']['crypto']['enabled_crypto_plugins'].include? 'simple_crypto' %>
# ================= Simple Crypto Plugin Options ==========================
[simple_crypto_plugin]

kek = <%= node['barbican']['simple_crypto_plugin']['kek']  %>
<% end %>


<% if node['barbican']['crypto']['enabled_crypto_plugins'].include? 'p11_crypto_plugin' %>
# ================= PKCS11 Crypto Plugin Options ==========================
[p11_crypto_plugin]

# Path to vendor PKCS11 library
library_path = <%= node['barbican']['p11_crypto_plugin']['library_path'] %>
# Password to login to PKCS11 session
login = <%= node['barbican']['p11_crypto_plugin']['login'] %>
<% end %>

# ================= Nova Configuration for verify-resource branch =========
[nova]
auth_url = <%= node['barbican']['nova']['auth_url'] %>
bypass_url = <%= node['barbican']['nova']['bypass_url'] %>
username = <%= node['barbican']['nova']['username'] %>
password = <%= node['barbican']['nova']['password'] %>
project = <%= node['barbican']['nova']['project'] %>
<% if node['barbican']['nova']['insecure_client'] %>
insecure_client = True
<% else %>
insecure_client = False
<% end %>
